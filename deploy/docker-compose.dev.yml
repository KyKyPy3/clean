version: "3.9"
name: clean

services:
  clean:
    container_name: api
    build:
      context: ..
      dockerfile: deploy/Dockerfile.air
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_started
      redis:
        condition: service_started
      otelcol:
        condition: service_started
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
    restart: on-failure
    volumes:
      - ../:/app
    networks:
      - web_api

  redis:
    image: redis/redis-stack:latest
    container_name: redis
    ports:
      - ${REDIS_HOST_PORT:-6379}:${REDIS_PORT:-6379}
      - "8001:8001"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s
    networks:
      - web_api

  postgresql:
    image: postgres:latest
    container_name: postgres
    ports:
      - ${POSTGRES_HOST_PORT:-5432}:${POSTGRES_PORT:-5432}
    restart: on-failure
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-clean_db}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ../tmp/pgdata:/var/lib/postgresql/data
    networks:
      - web_api

  zookeeper:
    image: 'bitnami/zookeeper:3.9.1'
    container_name: zookeeper
    ports:
      - ${ZOOKEEPER_HOST_PORT:-2181}:${ZOOKEEPER_PORT:-2181}
    restart: on-failure
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ../tmp/zookeeper:/zookeeper
    networks:
      - web_api

  kafka:
    image: 'bitnami/kafka:3.4.1'
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh", "--bootstrap-server=kafka:9092", "--list" ]
      start_period: 15s
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ../tmp/kafka:/bitnami
    networks:
      - web_api

  kafka-init:
    image: 'bitnami/kafka:3.4.1'
    working_dir: /opt/bitnami/kafka/bin
    entrypoint: [ '/bin/sh', '-c' ]
    depends_on:
      kafka:
        condition: service_started
    init: true
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server=kafka:9092 --list
      echo -e 'Creating kafka topics'
      kafka-topics.sh --create --if-not-exists --topic registration --replication-factor=1 --partitions=1 --bootstrap-server=kafka:9092
      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server=kafka:9092 --list
      "
    networks:
      - web_api

  otelcol:
    image: otel/opentelemetry-collector-contrib:0.86.0
    container_name: clean_otelcol
    deploy:
      resources:
        limits:
          memory: 125M
    restart: always
    command: [ "--config=/etc/otelcol-config.yml" ]
    volumes:
      - ../etc/otelcol-config.yml:/etc/otelcol-config.yml
    ports:
      - "1888:1888"     # pprof extension
      - "4317"          # OTLP gRPC receiver
      - "4318"          # OTLP over HTTP receiver
      - "13133:13133"   # health_check extension
      - "9464"          # Prometheus exporter
      - "8888"          # Prometheus metric exposed by the collector
      - "8889:8889"     # Prometheus exporter metric
    depends_on:
      - jaeger
      - prometheus
    networks:
      - web_api

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: clean_jaeger
    restart: always
    command:
      - "--memory.max-traces"
      - "10000"
      - "--prometheus.server-url"
      - "http://prometheus:9090"
    deploy:
      resources:
        limits:
          memory: 300M
    environment:
      - METRICS_STORAGE_TYPE=prometheus
    ports:
      - "16686:16686"
      - "4317"
      - "4318"
    networks:
      - web_api

  prometheus:
    container_name: clean_prometheus
    image: prom/prometheus
    restart: on-failure
    volumes:
      - ../etc/prometheus-config.yml:/etc/prometheus/prometheus.yml:Z
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention=20d"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--web.route-prefix=/"
      - "--enable-feature=exemplar-storage"
      - "--enable-feature=otlp-write-receiver"
    ports:
      - ${PROMETHEUS_HOST_PORT:-9090}:${PROMETHEUS_PORT:-9090}
    networks:
      - web_api

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    restart: on-failure
    ports:
      - "9100"
    networks:
      - web_api

networks:
  web_api:
    driver: bridge