// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/KyKyPy3/clean/internal/domain/common"

	mock "github.com/stretchr/testify/mock"
)

// EmailSender is an autogenerated mock type for the EmailSender type
type EmailSender struct {
	mock.Mock
}

type EmailSender_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailSender) EXPECT() *EmailSender_Expecter {
	return &EmailSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, destination, subject, body
func (_m *EmailSender) Send(ctx context.Context, destination common.Email, subject string, body string) error {
	ret := _m.Called(ctx, destination, subject, body)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, common.Email, string, string) error); ok {
		r0 = rf(ctx, destination, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type EmailSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - destination common.Email
//   - subject string
//   - body string
func (_e *EmailSender_Expecter) Send(ctx interface{}, destination interface{}, subject interface{}, body interface{}) *EmailSender_Send_Call {
	return &EmailSender_Send_Call{Call: _e.mock.On("Send", ctx, destination, subject, body)}
}

func (_c *EmailSender_Send_Call) Run(run func(ctx context.Context, destination common.Email, subject string, body string)) *EmailSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.Email), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *EmailSender_Send_Call) Return(_a0 error) *EmailSender_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailSender_Send_Call) RunAndReturn(run func(context.Context, common.Email, string, string) error) *EmailSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailSender creates a new instance of EmailSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailSender {
	mock := &EmailSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
