// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mediator "github.com/KyKyPy3/clean/pkg/mediator"
	mock "github.com/stretchr/testify/mock"
)

// Mediator is an autogenerated mock type for the Mediator type
type Mediator struct {
	mock.Mock
}

type Mediator_Expecter struct {
	mock *mock.Mock
}

func (_m *Mediator) EXPECT() *Mediator_Expecter {
	return &Mediator_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, events
func (_m *Mediator) Publish(ctx context.Context, events ...mediator.Event) error {
	_va := make([]interface{}, len(events))
	for _i := range events {
		_va[_i] = events[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...mediator.Event) error); ok {
		r0 = rf(ctx, events...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mediator_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Mediator_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - events ...mediator.Event
func (_e *Mediator_Expecter) Publish(ctx interface{}, events ...interface{}) *Mediator_Publish_Call {
	return &Mediator_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{ctx}, events...)...)}
}

func (_c *Mediator_Publish_Call) Run(run func(ctx context.Context, events ...mediator.Event)) *Mediator_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]mediator.Event, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(mediator.Event)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Mediator_Publish_Call) Return(_a0 error) *Mediator_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Mediator_Publish_Call) RunAndReturn(run func(context.Context, ...mediator.Event) error) *Mediator_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMediator creates a new instance of Mediator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mediator {
	mock := &Mediator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
