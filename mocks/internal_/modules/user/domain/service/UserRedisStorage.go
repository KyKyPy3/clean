// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/KyKyPy3/clean/internal/domain/common"

	entity "github.com/KyKyPy3/clean/internal/modules/user/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRedisStorage is an autogenerated mock type for the UserRedisStorage type
type UserRedisStorage struct {
	mock.Mock
}

type UserRedisStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRedisStorage) EXPECT() *UserRedisStorage_Expecter {
	return &UserRedisStorage_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *UserRedisStorage) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRedisStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserRedisStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *UserRedisStorage_Expecter) Delete(ctx interface{}, key interface{}) *UserRedisStorage_Delete_Call {
	return &UserRedisStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *UserRedisStorage_Delete_Call) Run(run func(ctx context.Context, key string)) *UserRedisStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRedisStorage_Delete_Call) Return(_a0 error) *UserRedisStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRedisStorage_Delete_Call) RunAndReturn(run func(context.Context, string) error) *UserRedisStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserRedisStorage) GetByID(ctx context.Context, id common.UID) (entity.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.UID) (entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.UID) entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.UID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRedisStorage_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserRedisStorage_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id common.UID
func (_e *UserRedisStorage_Expecter) GetByID(ctx interface{}, id interface{}) *UserRedisStorage_GetByID_Call {
	return &UserRedisStorage_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UserRedisStorage_GetByID_Call) Run(run func(ctx context.Context, id common.UID)) *UserRedisStorage_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.UID))
	})
	return _c
}

func (_c *UserRedisStorage_GetByID_Call) Return(_a0 entity.User, _a1 error) *UserRedisStorage_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRedisStorage_GetByID_Call) RunAndReturn(run func(context.Context, common.UID) (entity.User, error)) *UserRedisStorage_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, key, user
func (_m *UserRedisStorage) Set(ctx context.Context, key string, user entity.User) error {
	ret := _m.Called(ctx, key, user)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.User) error); ok {
		r0 = rf(ctx, key, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRedisStorage_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type UserRedisStorage_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - user entity.User
func (_e *UserRedisStorage_Expecter) Set(ctx interface{}, key interface{}, user interface{}) *UserRedisStorage_Set_Call {
	return &UserRedisStorage_Set_Call{Call: _e.mock.On("Set", ctx, key, user)}
}

func (_c *UserRedisStorage_Set_Call) Run(run func(ctx context.Context, key string, user entity.User)) *UserRedisStorage_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.User))
	})
	return _c
}

func (_c *UserRedisStorage_Set_Call) Return(_a0 error) *UserRedisStorage_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRedisStorage_Set_Call) RunAndReturn(run func(context.Context, string, entity.User) error) *UserRedisStorage_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRedisStorage creates a new instance of UserRedisStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRedisStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRedisStorage {
	mock := &UserRedisStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
