// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/KyKyPy3/clean/internal/user/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserPgStorage is an autogenerated mock type for the UserPgStorage type
type UserPgStorage struct {
	mock.Mock
}

type UserPgStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserPgStorage) EXPECT() *UserPgStorage_Expecter {
	return &UserPgStorage_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, user
func (_m *UserPgStorage) Create(ctx context.Context, user entity.User) (entity.User, error) {
	ret := _m.Called(ctx, user)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) (entity.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.User) entity.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPgStorage_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserPgStorage_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - user entity.User
func (_e *UserPgStorage_Expecter) Create(ctx interface{}, user interface{}) *UserPgStorage_Create_Call {
	return &UserPgStorage_Create_Call{Call: _e.mock.On("Create", ctx, user)}
}

func (_c *UserPgStorage_Create_Call) Run(run func(ctx context.Context, user entity.User)) *UserPgStorage_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.User))
	})
	return _c
}

func (_c *UserPgStorage_Create_Call) Return(_a0 entity.User, _a1 error) *UserPgStorage_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserPgStorage_Create_Call) RunAndReturn(run func(context.Context, entity.User) (entity.User, error)) *UserPgStorage_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserPgStorage) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPgStorage_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserPgStorage_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserPgStorage_Expecter) Delete(ctx interface{}, id interface{}) *UserPgStorage_Delete_Call {
	return &UserPgStorage_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *UserPgStorage_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserPgStorage_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserPgStorage_Delete_Call) Return(_a0 error) *UserPgStorage_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserPgStorage_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *UserPgStorage_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: ctx, limit
func (_m *UserPgStorage) Fetch(ctx context.Context, limit int64) ([]entity.User, error) {
	ret := _m.Called(ctx, limit)

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]entity.User, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []entity.User); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPgStorage_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type UserPgStorage_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int64
func (_e *UserPgStorage_Expecter) Fetch(ctx interface{}, limit interface{}) *UserPgStorage_Fetch_Call {
	return &UserPgStorage_Fetch_Call{Call: _e.mock.On("Fetch", ctx, limit)}
}

func (_c *UserPgStorage_Fetch_Call) Run(run func(ctx context.Context, limit int64)) *UserPgStorage_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserPgStorage_Fetch_Call) Return(_a0 []entity.User, _a1 error) *UserPgStorage_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserPgStorage_Fetch_Call) RunAndReturn(run func(context.Context, int64) ([]entity.User, error)) *UserPgStorage_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function with given fields: ctx, email
func (_m *UserPgStorage) GetByEmail(ctx context.Context, email string) (entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPgStorage_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type UserPgStorage_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserPgStorage_Expecter) GetByEmail(ctx interface{}, email interface{}) *UserPgStorage_GetByEmail_Call {
	return &UserPgStorage_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *UserPgStorage_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *UserPgStorage_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserPgStorage_GetByEmail_Call) Return(_a0 entity.User, _a1 error) *UserPgStorage_GetByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserPgStorage_GetByEmail_Call) RunAndReturn(run func(context.Context, string) (entity.User, error)) *UserPgStorage_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserPgStorage) GetByID(ctx context.Context, id uuid.UUID) (entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPgStorage_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserPgStorage_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserPgStorage_Expecter) GetByID(ctx interface{}, id interface{}) *UserPgStorage_GetByID_Call {
	return &UserPgStorage_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *UserPgStorage_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserPgStorage_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserPgStorage_GetByID_Call) Return(_a0 entity.User, _a1 error) *UserPgStorage_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserPgStorage_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (entity.User, error)) *UserPgStorage_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserPgStorage creates a new instance of UserPgStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserPgStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserPgStorage {
	mock := &UserPgStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
